@startuml
!theme plain
skinparam state {
  BackgroundColor lightgreen
  BorderColor black
  ArrowColor black
}

title QUIC Stream State Transitions

state "QUIC Stream States" as QUICStream {
  state STREAM_IDLE : Stream created
  state STREAM_OPEN : Active bidirectional
  state HALF_CLOSED_LOCAL : Local send closed
  state HALF_CLOSED_REMOTE : Remote send closed
  state STREAM_CLOSED : Stream terminated
  state STREAM_ERROR : Stream error

  [*] --> STREAM_IDLE : StreamOpen()
  STREAM_IDLE --> STREAM_OPEN : StreamStart()\nPEER_STREAM_STARTED
  STREAM_OPEN --> HALF_CLOSED_LOCAL : StreamShutdown(SEND)\nSend FIN
  STREAM_OPEN --> HALF_CLOSED_REMOTE : PEER_SEND_SHUTDOWN\nReceive FIN
  HALF_CLOSED_LOCAL --> STREAM_CLOSED : PEER_SEND_SHUTDOWN
  HALF_CLOSED_REMOTE --> STREAM_CLOSED : StreamShutdown(SEND)
  STREAM_OPEN --> STREAM_ERROR : Stream reset\nProtocol error
  HALF_CLOSED_LOCAL --> STREAM_ERROR : Stream reset
  HALF_CLOSED_REMOTE --> STREAM_ERROR : Stream reset
  STREAM_ERROR --> STREAM_CLOSED : Error handled
  STREAM_CLOSED --> [*] : StreamClose()
}

' Stream-specific annotations preserved from original
note right of STREAM_OPEN : **Open State Capabilities:**\n- Bidirectional data flow\n- Send and receive active\n- Flow control enforced\n- Frame processing active

note right of HALF_CLOSED_LOCAL : **Half-Closed Local:**\n- Local send direction closed\n- Remote can still send data\n- FIN frame sent\n- Awaiting peer closure

note right of HALF_CLOSED_REMOTE : **Half-Closed Remote:**\n- Remote send direction closed\n- Local can still send data\n- FIN frame received\n- Can complete local send

note left of STREAM_ERROR : **Error Conditions:**\n- RESET_STREAM received\n- STOP_SENDING received\n- Protocol violations\n- Flow control violations

note left of STREAM_CLOSED : **Closed State:**\n- Both directions closed\n- No data transmission\n- Resources can be freed\n- Stream ID available for reuse

' Stream type annotations
note top of STREAM_IDLE : **Stream Creation Types:**\n- Bidirectional (client: 0,4,8... server: 1,5,9...)\n- Unidirectional (client: 2,6,10... server: 3,7,11...)

' Cross-layer references
note bottom of STREAM_OPEN : **Stream Usage References:**\n→ **HTTP/3 Layer**: Control streams, Request streams\n→ **WebTransport**: Session streams, Data streams\n→ **Connection**: Stream multiplexing

' Flow control annotations
note right of QUICStream : **Flow Control Features:**\n- Stream-level flow control\n- Connection-level flow control\n- MAX_STREAM_DATA frames\n- Stream credit management

' Stream lifecycle notes
note left of STREAM_IDLE : **Idle State Prerequisites:**\n→ **Reference: QUIC Connection States**\nConnection must be CONNECTED\nbefore stream creation

' Additional state transitions for unidirectional streams
STREAM_IDLE --> HALF_CLOSED_LOCAL : Unidirectional\n(send-only)
STREAM_IDLE --> HALF_CLOSED_REMOTE : Unidirectional\n(receive-only)

note on link : **Unidirectional Streams:**\nSkip OPEN state\nDirect to half-closed

' Error recovery
note bottom of STREAM_ERROR : **Error Recovery:**\n- Application notification\n- Resource cleanup\n- Error code propagation\n- Stream reset handling

@enduml
